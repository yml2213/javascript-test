function Env(name, e) { class s { constructor(name) { this.env = name; } } return new (class { constructor(name) { (this.name = name), (this.logs = []), (this.startTime = new Date().getTime()), this.log(`\n🔔${this.name}, 开始!`); } isNode() { return "undefined" != typeof module && !!module.exports; } log(...name) { name.length > 0 && (this.logs = [...this.logs, ...name]), console.log(name.join(this.logSeparator)); } done() { const e = new Date().getTime(), s = (e - this.startTime) / 1e3; this.log(`\n🔔${this.name}, 结束! 🕛 ${s} 秒`); } })(name, e); } async function httpResult(name, options) { if (!name) { name = /function\s*(\w*)/i.exec(arguments.callee.toString())[1]; } try { let result = await utils.httpRequest(name, options); if (result) { return result; } { DoubleLog(`未知错误(1`); } } catch (error) { console.log(error); } } async function SendMsg(message) { if (!message) return; if (Notify > 0) { if ($.isNode()) { var notify = require("./sendNotify"); await notify.sendNotify($.name, message); } else { console.log($.name, "", message); } } else { console.log(message); } } function wait(n) { return new Promise(function (resolve) { setTimeout(resolve, n * 1000); }); } function DoubleLog(data) { console.log(`    ${data}`); msg += `\n    ${data}`; } async function check_utils() { const fs = require("fs"); if (fs.readdirSync(__dirname).indexOf('utils.js') > -1) { console.log(`当前目录 [${__dirname}] 依赖 utils.js 文件状态正常!`); } else { console.log(`当前目录 [${__dirname}] 未找到 utils.js , 将下载到该目录!`); var request = require("request"); var options = { method: "GET", url: "https://raw.gh.fakev.cn/yml2213/javascript/master/utils.js", headers: {}, }; request(options, function (e, response) { text = response.body; fs.writeFile(`${__dirname}/utils.js`, text, `utf-8`, (err) => { if (err) { console.log(`目录 [${__dirname}]  utils.js 文件 写入失败`); } console.log(`\n目录 [${__dirname}]  utils.js 文件写入成功\n\n请再次运行脚本!\n请再次运行脚本!\n请再次运行脚本!`); }); }); } }


try {
	check_utils()
	var utils = require("./utils");
} catch (e) { }

// console.log(typeof (utils));
console.log(utils);